version: '3.8'

services:
  frontend:
    image: my-frontend:v2.0
    build: ./frontend
    ports:
      - "80:80"
    depends_on:
      - auth
      - backend
      - db
    networks:
      - app-network

  auth:
    image: my-auth:v2.0
    build: ./auth
    ports:
      - "8000:8000"
    depends_on:
      - db
    environment:
      FLASK_APP: app.py
      FLASK_ENV: development
      DB_HOST: db
      DB_NAME: tourismdb
      DB_USER: postgres
      DB_PASSWORD: password
    volumes:
      - ./auth:/app
    networks:
      - app-network
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure

  monitoring:
    image: my-monitor:v2.0
    build: ./monitoring
    ports:
      - "8008:8008"
    container_name: monitoring
    depends_on:
      - db
    networks:
      - app-network
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure

  backend:
    image: my-backend:v2.0
    build: ./backend
    ports:
      - "8001:8001"
    depends_on:
      - db
      - auth
    environment:
      FLASK_APP: app.py
      FLASK_ENV: development
      DB_HOST: db
      DB_NAME: tourismdb
      DB_USER: postgres
      DB_PASSWORD: password
    volumes:
      - ./backend:/app
    networks:
      - app-network
    deploy:
      replicas: 2
      restart_policy:
        condition: on-failure

  db:
    image: postgres:13
    build:
      context: ./db_init
      dockerfile: Dockerfile
    environment:
      POSTGRES_DB: tourismdb
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./db_init/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - app-network
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure

networks:
  app-network:
    driver: overlay

volumes:
  postgres_data:
